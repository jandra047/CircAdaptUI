#include "mainwindow.h"
#include "ui_mainwindow.h"
<<<<<<< HEAD
#include <math.h>
#include <QDebug>
=======
>>>>>>> dev
#include <QTime>
#include <modelwrapper.h>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
<<<<<<< HEAD
{
    ui->setupUi(this);
    QTimer *timer = new QTimer(this);
    connect(timer, &QTimer::timeout, ui->graph, &GraphContainer::updateGraph);


    ui->graph->createSignals(2);
    QList<Signal* > ss = ui->graph->mSignals;
    ModelWrapper mw;
    mw.set_model_state();
    // mw.run_stable(true);
    mw.run_single_beat();
    auto const t = mw.get_vec("Solver.t");
    auto VLv = mw.get_vec("Model.Peri.TriSeg.cLv.V");
    auto VRv = mw.get_vec("Model.Peri.TriSeg.cRv.V");
    for (int i = 0; i < VLv.size(); i++)
    {
        VLv[i] *= 1e6;
        VRv[i] *= 1e6;
    }


    ss[0]->setXData(t);
    ss[0]->setYData(VLv);
    ss[1]->setXData(t);
    ss[1]->setYData(VRv);

    timer->start(10);
=======
    , buffer()
    , mw(buffer, this)
{
    ui->setupUi(this);
    // setStyleSheet("background-color: #aaaaaa");
    connect(timer, &QTimer::timeout, &mw, &ModelWrapper::run_single_step);
    // connect(&mw, &ModelWrapper::timestep_done, this, &MainWindow::updateSigGraph);
    // connect(&mw, &ModelWrapper::timestep_done, this, &MainWindow::updatePVGraph);
    // connect(&mw, &ModelWrapper::timestep_done, ui->ssGraph, &PVLoopGraph::updateGraph);


    connect(buffertimer, &QTimer::timeout, this, &MainWindow::updateGraphs);

    timer->start(0);
    buffertimer->setSingleShot(true);
    buffertimer->start(2000); // 5000 milliseconds = 5 seconds

    // Connect the timer's timeout signal to a lambda function
    connect(buffertimer, &QTimer::timeout, [&]() {

        // Start the timer with a 100 ms interval
        buffertimer->start(1000/60);
    });
>>>>>>> dev


}

MainWindow::~MainWindow()
{
    delete ui;
}
<<<<<<< HEAD
=======

void MainWindow::on_actionPlay_triggered()
{
    if (timer->isActive())
    {
        timer->stop();
    }
    else
    {
        timer->start();
    }
}

void MainWindow::on_actionStress_strain_toggled(bool isVisible)
{
    ui->ssGraph->setVisible(isVisible);
}

// void MainWindow::on_actionAutoscale_triggered()
// {
//     ui->signalGraph->rescaleAxes(true);
//     ui->signalGraph->replot();
//     ui->ssGraph->rescaleAxes(true);
//     ui->ssGraph->replot();
//     ui->pvGraph->rescaleAxes(true);
//     ui->pvGraph->replot();
// }

void MainWindow::updateGraphs()
{
    ui->a->updateGraphs(buffer);
    buffer.take("t", 0.015);
}
>>>>>>> dev
